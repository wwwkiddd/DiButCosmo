import asyncio
import os


from aiogram import Router, F, types, Bot
from aiogram.client.session import aiohttp
from aiogram.enums import ParseMode
from aiogram.filters import or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile, BufferedInputFile
from openai import BadRequestError
from sqlalchemy.ext.asyncio import AsyncSession

from app.open_webapp_bot.AI.api_requests.deepseek import deepseek
from app.open_webapp_bot.AI.api_requests.grok import grok_for_receipt
from app.open_webapp_bot.AI.api_requests.nano_banana import nano_banana
from app.open_webapp_bot.AI.api_requests.open_ai import gpt_5
from app.open_webapp_bot.AI.api_requests.perplexity import perp_send_request
from app.open_webapp_bot.AI.database.orm_query import orm_delete_gpt_chat_history, orm_get_user, orm_add_user, \
    orm_update_user_name, orm_update_first_name, orm_update_last_name, orm_delete_perplexity_chat_history, \
    orm_delete_gemini_chat_history
#
# from openai import BadRequestError
#
from app.open_webapp_bot.AI.kbds.inline import get_callback_btns, kbd_tk
from app.open_webapp_bot.AI.kbds.reply import main_kbd, get_keyboard
from app.open_webapp_bot.AI.handlers.processing import check_balance, send_typing_action, get_image_for_ai, send_long_text, \
    use_model

ai_func = Router()

BOT_TOKEN = os.getenv("BOT_TOKEN")

class AISelected(StatesGroup):

    #text models
    receipt = State()
    deepseek = State()
    perplexity = State()
    sonar_deep_research = State()
    gpt_5 = State()

    #image models
    image = State()
    image_editing = State()
    image_adding = State()

    #music models
    music = State()
    # make_cover = State()
    # music_adding_prompt = State()
    # long_track = State()

    #video models
    video = State()
    video_adding_prompt = State()
    video_editing = State()


@ai_func.callback_query(F.data == 'ai')
async def start_ai(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id
    user = await orm_get_user(session, callback.from_user.id)
    if not user:
        data = {'user_id': user_id,
                'first_name': callback.from_user.first_name,
                'last_name': callback.from_user.last_name,
                'tokens': 200,
                'username': callback.from_user.username
                }
        await orm_add_user(session, data)
    elif user.username != callback.from_user.username:
        await orm_update_user_name(session, user_id, callback.from_user.username)
    elif user.first_name != callback.from_user.first_name:
        await orm_update_first_name(session, user_id, callback.from_user.first_name)
    elif user.last_name != callback.from_user.last_name:
        await orm_update_last_name(session, user_id, callback.from_user.last_name)

    await callback.message.answer(
        '<b>‚ú® –ü—Ä–∏–≤–µ—Ç, —è —Å–æ–±—Ä–∞–ª –≤ —Å–µ–±–µ –≤—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞!</b>\n\n<u>–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:</u>\n\n'
        'üìù –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n\n'
        'üñºÔ∏è –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n'
        'üé¨ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n\n'
        'üé∏ –ü–∏—Å–∞—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å –º—É–∑—ã–∫—É\n\n'
        '‚Äçüë®‚Äçüç≥ –ü–æ–¥–±–∏—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –ö–ë–ñ–£\n\n'
        '<i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º üëá</i>',
        reply_markup=main_kbd)
    await callback.answer()


    await state.clear()
#
#
################################## For FSM ####################################################################

@ai_func.message(F.text == 'üìù –¢–µ–∫—Å—Ç')
async def work_with_text(message: types.Message, state: FSMContext):
    await state.clear()

    await message.delete()
    await message.answer('–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã 3 –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n\n'
                         '1) –ù–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –æ–±–ª–∞–¥–∞–µ—Ç —Å–∏–ª—å–Ω—ã–º–∏ <b>–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º–∏</b> —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏. –£–º–µ–µ—Ç —Ö–æ—Ä–æ—à–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏, –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç <i>–∫—Ä–µ–∞—Ç–æ—Ä–∞–º –∏ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á</i>.\n'
                         'üì• –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥: <u>—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã</u> (PDF, Python, TXT, HTML, CSS –∏ —Ç.–¥.)\n'
                         '‚è≥ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - <u>–¥–æ 1 –º–∏–Ω—É—Ç—ã(—Ç–µ–∫—Å—Ç)</u>\n'
                         '                                   <u>1-2 –º–∏–Ω—É—Ç—ã(–¥–æ–∫—É–º–µ–Ω—Ç—ã)</u>\n'
                         'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: <b>2 —Ç–æ–∫–µ–Ω–∞</b>\n\n'
                         '2) –õ—É—á—à–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è <i>—É—á–µ–±—ã –∏ —Ä–∞–±–æ—Ç—ã</i>, –≤ –Ω–µ–π —Å–¥–µ–ª–∞–Ω –∞–∫—Ü–µ–Ω—Ç –Ω–∞ <b>–≤–µ–±-–ø–æ–∏—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–∫—Ç–æ–≤</b>\n'
                         'üì• –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥: <u>—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ</u>\n'
                         '‚è≥ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - <u>–¥–æ 1 –º–∏–Ω—É—Ç—ã</u>\n'
                         'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: <b>8 —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n'
                         '3) –ù–µ–π—Ä–æ—Å–µ—Ç—å, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –¥–ª—è <b>–≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞</b>.'
                         ' –ú–æ—â–Ω–µ–π—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–∞–∑–±–∏–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∏ –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã. '
                         '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è <i>–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</i>\n'
                         'üì• –ú–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥: <u>—Ç–µ–∫—Å—Ç</u>\n'
                         '‚è≥ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - <u>1-5 –º–∏–Ω—É—Ç</u>\n'
                         'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: <b>160 —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n'
                         '<tg-spoiler>ü§ñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç—á–∏—â–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò, —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –∏–∑–±–µ–∂–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫</tg-spoiler>',
                         reply_markup=get_callback_btns(btns={
                             '1) –õ—ë–≥–∫–∞—è üå†': 'deepseek',
                             '2) –î–ª—è —Ä–∞–±–æ—Ç—ã üë®‚Äçüíª': 'perplexity',
                             '3) –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ üßë‚Äçüéì': 'sonar-deep-research'
                         }))


@ai_func.callback_query(F.data == 'deepseek')
async def enter_to_gemini(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AISelected.deepseek)

    await callback.message.answer('–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: <b>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è üå†</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...',
                                  reply_markup=get_keyboard('üóë –û—Ç—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞'))


@ai_func.callback_query(F.data == 'perplexity')
async def enter_to_perplexity(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: <b>–î–ª—è —Ä–∞–±–æ—Ç—ã üë®‚Äçüíª</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...',
                                  reply_markup=get_keyboard('üóë –û—Ç—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞'))

    await state.set_state(AISelected.perplexity)

#
# @ai_func.callback_query(F.data == 'sonar-deep-research')
# async def enter_to_sonar_deep(callback: types.CallbackQuery, state: FSMContext):
#     await callback.answer()
#     await callback.message.answer('–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: <b>–ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ üßë‚Äçüéì</b>\n–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...',
#                                   reply_markup=get_keyboard('üóë –û—Ç—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞'))
#
#     await state.set_state(AISelected.sonar_deep_research)


@ai_func.message(F.text == 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
async def work_with_image(message: types.Message, state: FSMContext):
    await message.delete()

    await message.answer('‚ú® <b>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ!</b> ‚ú®\n\n'
                                                    '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Ç 1 –¥–æ 10), –∫–æ—Ç–æ—Ä–æ–µ(—ã–µ) –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å\n\n'
                                                    '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É - 40 —Ç–æ–∫–µ–Ω–æ–≤\n'
                                                    '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ - 70 —Ç–æ–∫–µ–Ω–æ–≤ ')

    await state.set_state(AISelected.image)


# @ai_func.message(F.text == 'üé¨ –í–∏–¥–µ–æ')
# async def work_with_image(message: types.Message, state: FSMContext):
#     await message.delete()
#     photo = FSInputFile('./files/aspect_ratio.png')
#     await message.answer_photo(photo=photo, caption='‚ú® <b>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–∏–¥–µ–æ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ!</b> ‚ú® \n\n'
#                                                     '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ <i>–ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É</i> –∏–ª–∏, <i>–ø—Ä–∏–∫—Ä–µ–ø–∏–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Ñ–æ—Ç–æ</i>, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ç–∞–Ω–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–º –∫–∞–¥—Ä–æ–º.\n\n'
#                                                     '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∏–¥–µ–æ –¥–ª–∏—Ç—Å—è 5 —Å–µ–∫—É–Ω–¥, –Ω–æ –º–æ–∂–Ω–æ –µ–≥–æ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ 10, –¥–ª—è —ç—Ç–æ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–¥–ª–∏—Ç—å" –≤ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞\n\n'
#                                                     '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –≤–∏–¥–µ–æ(—Å–º. —Ñ–æ—Ç–æ)‚òùÔ∏è\n\n'
#                                                     '–¶–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 105 —Ç–æ–∫–µ–Ω–æ–≤ (5 —Å–µ–∫)\n'
#                                                     '                            200 —Ç–æ–∫–µ–Ω–æ–≤ (10 —Å–µ–∫)')
#
#     await state.set_state(AISelected.video)
#
#
# @ai_func.message(F.text == 'üé∏ –ú—É–∑—ã–∫–∞')
# async def work_with_music(message: types.Message, state: FSMContext):
#     await message.delete()
#
#     await message.answer('‚ú® <b>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –º—É–∑—ã–∫—É –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ!</b> ‚ú®'
#                          '\n–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–æ–∑–¥–∞—Å—Ç —Ç—Ä–µ–∫ –¥–ª—è –≤–∞—Å\n\n–¶–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - 30 —Ç–æ–∫–µ–Ω–æ–≤')
#
#     await state.set_state(AISelected.music)
#
#
@ai_func.message(F.text == 'ü§ñ‚ùóÔ∏èGPT 5‚ùóÔ∏èü§ñ')
async def work_with_gpt_5(message: types.Message, state: FSMContext):
    await message.delete()

    photo = FSInputFile('app/open_webapp_bot/AI/files/gpt_5.jpg')
    await message.answer_photo(photo=photo, caption='''‚ùó–ü–æ—Å–ª–µ–¥–Ω—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç OpenAI —É–∂–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º!!!\n\nüöÄ
‚ú® üìè –ú–∞—Å—à—Ç–∞–± ‚Äî GPT‚Äë5 –≤ —Ä–∞–∑—ã –±–æ–ª—å—à–µ –∏ ¬´—É–º–Ω–µ–µ¬ª: —Ç—Ä–∏–ª–ª–∏–æ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤ —Å–æ—Ç–µ–Ω –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ —É GPT‚Äë4.\n
üñº –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî –ø–æ–Ω–∏–º–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –Ω–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n
üß† –õ–æ–≥–∏–∫–∞ ‚Äî —É–º–µ–µ—Ç —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ (chain‚Äëof‚Äëthought), —á—Ç–æ –¥–∞—ë—Ç –≥–ª—É–±–æ–∫–æ–µ –∏ —Ç–æ—á–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.\n
üí¨ –ü–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî GPT‚Äë5 –ø–æ–º–Ω–∏—Ç –±–æ–ª—å—à–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ –∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏.\n
ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å ‚Äî –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –ò–ò‚Äë–∞–≥–µ–Ω—Ç, –≤—ã–ø–æ–ª–Ω—è—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞.\n
üéØ –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ ‚Äî GPT‚Äë4 –º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å–æ —à–∫–æ–ª—å–Ω–∏–∫–æ–º, GPT‚Äë5 ‚Äî —Å –∞—Å–ø–∏—Ä–∞–Ω—Ç–æ–º (PhD).\n
‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî –±—ã—Å—Ç—Ä–µ–µ, —Ç–æ—á–Ω–µ–µ –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ.\n\n
GPT‚Äë5 ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Ç‚Äë–±–æ—Ç, –∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞—É–∫–∏, –±–∏–∑–Ω–µ—Å–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.\n\n
–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: 10 —Ç–æ–∫–µ–Ω–æ–≤''', reply_markup=get_keyboard('üóë –û—Ç—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞'))

    await state.set_state(AISelected.gpt_5)


@ai_func.message(F.text == 'üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –ø–æ —Ñ–æ—Ç–æ')
async def work_with_receipt(message: types.Message, state: FSMContext):
    await message.delete()

    await message.answer('‚ú® <b>–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é!</b> ‚ú®\n\n'
                         '–ü—Ä–æ—Å—Ç–æ üìé –ø—Ä–∏–∫—Ä–µ–ø–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å, –∏ —è —Å–æ—Å—Ç–∞–≤–ª—é –≤–∫—É—Å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ö–ë–ñ–£\n\n'
                         '–í –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–º–µ—Å—Ç–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—èüë®‚Äçüç≥ <i>(–¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è –∏ —Ç.–¥.)</i>\n\n'
                         '–û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å—Ç–æ–∏—Ç 15 —Ç–æ–∫–µ–Ω–æ–≤')

    await state.set_state(AISelected.receipt)

# ################################## For TEXT ####################################################################
#

@ai_func.message(AISelected.gpt_5, F.text == 'üóë –û—Ç—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞')
async def clear_history_gpt(message: types.Message, session: AsyncSession):
    await orm_delete_gpt_chat_history(session, message.from_user.id)
    await message.answer('‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º')

@ai_func.message(AISelected.gpt_5)
async def text_gpt(message: types.Message, session: AsyncSession, bot: Bot, http_session: aiohttp.ClientSession):
    print('going_to_gpt')
    user_id = message.from_user.id
    if await check_balance(session, user_id, 'gpt_5'):

        stop_typing = asyncio.Event()
        typing_task = asyncio.create_task(send_typing_action(bot, message.chat.id, stop_typing))


        try:
            if message.text:
                response = await gpt_5(session, user_id, prompt=message.text)

            elif message.photo:
                print('its photo')
                image, file = await get_image_for_ai(bot, http_session, user_id=user_id,
                                                      photo_id=message.photo[-1].file_id)
                os.remove(file)

                response = await gpt_5(session, user_id, prompt=message.caption, image=image)

            else:
                return

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º typing
            stop_typing.set()
            await typing_task


            chunks = await send_long_text(response)
            for chunk in chunks:
                try:
                    await message.answer(chunk, parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    print(e)
                    try:
                        await message.answer(chunk)
                    except Exception as e:
                        print(e)
                        await message.answer(chunk, parse_mode=None)

            # await use_model(session, user_id, 'gpt_5')



        except Exception as e:
            stop_typing.set()
            await typing_task
            print(e)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support")
    else:
        await message.answer(
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
        reply_markup=kbd_tk)


@ai_func.message(AISelected.perplexity, F.text == 'üóë –û—Ç—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞')
async def clear_history_perplexity(message: types.Message, session: AsyncSession):
    await orm_delete_perplexity_chat_history(session, message.from_user.id)
    await message.answer('‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º')

@ai_func.message(AISelected.perplexity)
async def text_perplexity(message: types.Message, bot: Bot, session: AsyncSession, http_session: aiohttp.ClientSession):
    user_id = message.from_user.id



    if await check_balance(session, user_id, 'perplexity'):

        stop_typing = asyncio.Event()
        typing_task = asyncio.create_task(send_typing_action(bot, message.chat.id, stop_typing))
        try:
            image = None

            if message.photo:
                image, file = await get_image_for_ai(bot, http_session, user_id=user_id,
                                                     photo_id=message.photo[-1].file_id)
                os.remove(file)


                content  = message.caption if message.caption else '–û–ø–∏—à–∏ —Ñ–æ—Ç–æ'

            else:
                content = message.text
                if content[0] == "/": return

            print(content)
            ans, citations= await perp_send_request(session, user_id, content, image)


            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º typing
            stop_typing.set()
            await typing_task

            digits = []
            for i in range(len(citations)):
                digits.append(str(i))
            for d in digits:
                ans = ans.replace(f'[{d}]', f' [{d}]({citations[int(d) - 1]})')

            chunks = await send_long_text(ans)

            for chunk in chunks:

                try:
                    await message.answer(chunk, parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    print(e)
                    for d in digits:
                        chunk = chunk.replace(f' [{d}]({citations[int(d)-1]})', '')
                    try:
                        await message.answer(chunk)
                    except Exception as e:
                        print(e)
                        await message.answer(chunk, parse_mode=None)

            await use_model(session, user_id, 'perplexity')

            if citations:
                citations_message = '<strong>–°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</strong>\n'

                k = 1
                for citation in citations:
                    citations_message += f'{k} - {citation}\n'
                    k += 1

                await message.answer(citations_message)

        except Exception as e:
            stop_typing.set()
            await typing_task
            print(e)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support")
    else:
        await message.answer(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
            reply_markup=kbd_tk)


# @ai_func.message(AISelected.sonar_deep_research, F.text == 'üóë –û—Ç—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞')
# async def clear_history_sonar_deep(message: types.Message, session: AsyncSession):
#     await orm_delete_sonar_deep_chat_history(session, message.from_user.id)
#     await message.answer('‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º')
#
# @ai_func.message(AISelected.sonar_deep_research)
# async def text_sonar_deep(message: types.Message, session: AsyncSession, http_session: aiohttp.ClientSession, bot: Bot):
#     content = message.text
#     if content[0] == "/": return
#     user_id = message.from_user.id
#     await bot.send_chat_action(chat_id=message.chat.id, action='typing')
#
#     if await check_balance(session, user_id, 'sonar-deep-research'):
#         await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
#         ans, citations = await perp_deep_research_send_request(session, http_session,content, user_id)
#
#     # –≤—ã–Ω–µ—Å—Ç–∏ —Ü–∏—Ç–∞—Ç—ã –Ω–∞–≤–µ—Ä—Ö +
#         digits = []
#         for i in range(len(citations)):
#                 digits.append(str(i))
#         for d in digits:
#             ans = ans.replace(f'[{d}]', f' [{d}]({citations[int(d)-1]})')
#         ans = ans.replace('<think>', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é:\n')
#         ans = ans.replace('</think>', '\n–ü–µ—Ä–µ—Ö–æ–∂—É –∫ –æ—Ç–≤–µ—Ç—É:\n')
#         chunks = await send_long_text(ans)
#
#         for chunk in chunks:
#
#             try:
#                 await message.answer(chunk, parse_mode=ParseMode.MARKDOWN)
#             except Exception as e:
#                 print(e)
#                 for d in digits:
#                     chunk = chunk.replace(f' [{d}]({citations[int(d)-1]})', '')
#                 try:
#                     await message.answer(chunk)
#                 except Exception as e:
#                     print(e)
#                     await message.answer(chunk, parse_mode=None)
#
#         await use_model(session, user_id, 'sonar-deep-research')
#
#         if citations:
#             citations_message = '<strong>–°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</strong>\n'
#
#             k = 1
#             for citation in citations:
#                 citations_message += f'{k} - {citation}\n'
#                 k += 1
#
#             await message.answer(citations_message)
#     else:
#         await message.answer(
#             '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
#             reply_markup=kbd_tk)
#
#
#
@ai_func.message(AISelected.deepseek, F.text == 'üóë –û—Ç—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞')
async def clear_history_ds(message: types.Message, session: AsyncSession):
    await orm_delete_gemini_chat_history(session, message.from_user.id)
    await message.answer('‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º')

@ai_func.message(AISelected.deepseek, F.text)
async def text_deepseek(message: types.Message, bot: Bot, session: AsyncSession):
    user_id = message.from_user.id


    if not await check_balance(session, user_id, 'gemini'):
        await message.answer(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
            reply_markup=kbd_tk)
        return

    stop_typing = asyncio.Event()
    typing_task = asyncio.create_task(send_typing_action(bot, message.chat.id, stop_typing))
    try:
        prompt = message.text

        if prompt == "/":
            return

        ans = await deepseek(session, user_id, prompt)
        if ans:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º typing
            stop_typing.set()
            await typing_task

        chunks = await send_long_text(ans)
        for chunk in chunks:
            try:
                await message.answer(chunk, parse_mode=ParseMode.MARKDOWN)
            except Exception as e:
                print(e)
                try:
                    await message.answer(chunk)
                except Exception as e:
                    print(e)
                    await message.answer(chunk, parse_mode=None)

        await use_model(session, user_id, 'gemini')

    except Exception as e:
        stop_typing.set()
        await typing_task
        print(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support")



@ai_func.message(AISelected.receipt)
async def get_receipt(message: types.Message, bot: Bot, session: AsyncSession, http_session: aiohttp.ClientSession):
    try:
        user_id = message.from_user.id
        if await check_balance(session, message.from_user.id, 'receipt'):
            await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            image = None
            if message.photo:
                image, file = await get_image_for_ai(bot, http_session, user_id=user_id,
                                                     photo_id=message.photo[-1].file_id)
                os.remove(file)

                user_prompt = '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ò–∑—É—á–∏ —Ñ–æ—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–º, –Ω–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã –±–ª—é–¥ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–∑ –Ω–∏–∑ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, –¥–æ–±–∞–≤—å –ö–ë–ñ–£ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞. –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã'
                if message.caption:
                    user_prompt += message.caption

            elif message.text:
                user_prompt = message.text + '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ò–∑—É—á–∏ —Å–ø–∏—Å–æ–∫, –Ω–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç—ã –±–ª—é–¥ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –Ω–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, –¥–æ–±–∞–≤—å –ö–ë–ñ–£ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞. –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã'
            else:
                return

            ans = await grok_for_receipt(user_prompt, image)



            chunks = await send_long_text(ans)
            for chunk in chunks:
                try:
                    await message.answer(chunk, parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    print(e)
                    try:
                        await message.answer(chunk)
                    except Exception as e:
                        print(e)
                        await message.answer(chunk, parse_mode=None)

            await use_model(session, message.from_user.id, 'receipt')

        else:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
                                 reply_markup=kbd_tk)

    except Exception as e:
        print(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support")

#
# ######################################################################################################
#
#
# ################################## IMAGE #############################################################

users_collages = {}

# –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç callback –∫–Ω–æ–ø–∫–∏
# –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏
# —Ä–∞–∑–¥–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ +
@ai_func.message(AISelected.image_adding, F.text)
async def image_adding_gpt(message: types.Message, state: FSMContext, session: AsyncSession):
    prompt = message.text
    data = await state.get_data()
    key = data['image_adding']
    model = 'img2img'
    images = users_collages[key]
    print(images)

    try:
        await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
        image_out = await nano_banana(users_collages[key], prompt)
    except BadRequestError as e:
        print(e)
        if e.code == 'moderation_blocked':
            await message.answer(
                'ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –º–æ–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.')
            del users_collages[key]
            await state.set_state(AISelected.image)
        return
    except Exception as e:
        print(e)
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support')
        return

    del users_collages[key]
    await state.update_data(image=(prompt, images, image_out, model))
    input_file = BufferedInputFile(file=image_out, filename="your_image.jpeg")

    await state.set_state(AISelected.image)

    await message.answer_document(input_file)
    await message.answer_photo(photo=input_file, caption='–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüòå', reply_markup=get_callback_btns(btns={
        'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å': 'repeat',
        '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å': 'edit'
    }))

    await use_model(session, message.from_user.id, model)




@ai_func.message(or_f(AISelected.image, AISelected.image_adding))
async def to_nano_banana(message: types.Message, bot: Bot, state: FSMContext, session: AsyncSession, http_session: aiohttp.ClientSession):
    model = 'img2img'
    user_id = message.from_user.id

    if message.document:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º')
        return

    await state.update_data(image=None)


    images = []

# —Å–ª—É—á–∞–π –µ—Å–ª–∏ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if message.media_group_id:
        if await check_balance(session, user_id, model):
            key  = user_id
            if key not in users_collages:
                users_collages[key] = []



            image, file = await get_image_for_ai(bot, http_session, user_id=user_id, photo_id=message.photo[-1].file_id)
            users_collages[key].append(image)
            await state.update_data(image_adding=key)
            await state.set_state(AISelected.image_adding)

            if message.caption:
                prompt = message.caption
            else:
                 return


            try:
                await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
                image_out = await nano_banana(prompt, users_collages[key])
                os.remove(file)
            except BadRequestError as e:
                print(e)
                if e.code == 'moderation_blocked':
                    await message.answer('ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –º–æ–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.')
                return
            except Exception as e:
                print(e)
                await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support')
                return

        else:
            await message.answer(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
                reply_markup=kbd_tk)
            return

#—Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º

    elif message.caption and message.photo:
        if await check_balance(session, user_id, model):
            image, file = await get_image_for_ai(bot, http_session, user_id=user_id, photo_id=message.photo[-1].file_id)
            images.append(image)
            prompt = message.caption



            try:
                await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã...")
                image_out = await nano_banana(prompt, images)
                os.remove(file)

            except BadRequestError as e:
                print(e)
                if e.code == 'moderation_blocked':
                    await message.answer('ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –º–æ–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.')
                return
            except Exception as e:
                print(e)
                await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support')
                return

        else:
            await message.answer(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
                reply_markup=kbd_tk)
            return

    elif message.photo:
        if await check_balance(session, user_id, model):
            key = user_id


            users_collages[key] = []


            image, file = await get_image_for_ai(bot, http_session, user_id=user_id, photo_id=message.photo[-1].file_id)
            users_collages[key].append(image)
            os.remove(file)

            await state.update_data(image_adding=key)
            await state.set_state(AISelected.image_adding)
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ...')
            return

        else:
            await message.answer(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
                reply_markup=kbd_tk)
            return


    elif message.text:
        model = 'img2txt'
        if await check_balance(session, user_id, model):

            try:
                prompt = message.text
                await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã...")
                image_out, ans = await nano_banana(prompt)
            except BadRequestError as e:
                if e.code == 'moderation_blocked':
                    await message.answer('ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –º–æ–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.')
                return
            except Exception as e:
                print(e)
                await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support')
                return

        else:
            await message.answer(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
                reply_markup=kbd_tk)
            return
    else:
        return

    await state.update_data(image=(prompt, images, image_out, model))
    input_file = BufferedInputFile(file=image_out, filename="your_image.jpeg")
    if user_id in users_collages:
        del users_collages[user_id]

    await message.answer_document(input_file)
    await message.answer_photo(photo=input_file, caption=ans, reply_markup=get_callback_btns(btns={
        'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å': 'repeat',
        '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å': 'edit'
    }))
    await use_model(session, user_id, model)



@ai_func.callback_query(or_f(AISelected.image_adding, AISelected.image), F.data == 'repeat')
async def repeat_image_gpt(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    print('in_repeat')
    await callback.answer()
    data = await state.get_data()
    images = data['image'][1]
    prompt =data['image'][0]
    model = data['image'][-1]
    # print(images, prompt, model)
    user_id = callback.from_user.id

    if await check_balance(session, user_id, model):

        await callback.message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã...")

        try:
                image_out = await nano_banana(prompt, images)
        except BadRequestError as e:
            if e.code == 'moderation_blocked':
                await callback.message.answer(
                    'ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –º–æ–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.')
            return

        except Exception as e:
            print(e)
            await callback.message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support')
            return

        await state.update_data(image=(prompt, images, image_out, model))
        input_file = BufferedInputFile(file=image_out, filename="your_image.jpeg")
        await state.set_state(AISelected.image)

        await callback.message.answer_document(input_file)
        await callback.message.answer_photo(photo=input_file, caption='–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüòå', reply_markup=get_callback_btns(btns={
            'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å': 'repeat',
            '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å': 'edit'
        }))

        await use_model(session, user_id, model)

    else:
        await callback.message.answer(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
            reply_markup=kbd_tk)



@ai_func.callback_query(or_f(AISelected.image_adding, AISelected.image), F.data == 'edit')
async def enter_edit_gpt(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    if await check_balance(session, callback.from_user.id, 'img2img'):
        print('editing')
        await callback.answer()
        await callback.message.answer("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?")
        await state.set_state(AISelected.image_editing)

    else:
        await callback.message.answer(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
            reply_markup=kbd_tk)



@ai_func.message(AISelected.image_editing, F.text)
async def editing_gpt(message: types.Message, state: FSMContext, bot: Bot, session: AsyncSession, http_session: aiohttp.ClientSession):

    #—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    model = 'img2img'
    prompt = message.text
    data = await state.get_data()
    image_bytes = data['image'][-2]
    image, file = await get_image_for_ai(bot, http_session, user_id=message.from_user.id, photo_bytes=image_bytes)
    print(image)

    await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã...")
    try:
        image_out = await nano_banana(prompt, image)
        os.remove(file)

    except BadRequestError as e:
        if e.code == 'moderation_blocked':
            await message.answer('ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –º–æ–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.')
        return
    except Exception as e:
        print(e)
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support')
        return

    await state.update_data(image=(prompt, image, image_out, model))
    input_file = BufferedInputFile(file=image_out, filename="your_image.jpeg")

    await state.set_state(AISelected.image)

    await message.answer_document(input_file)
    await message.answer_photo(photo=input_file, caption='–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüòå',
                                        reply_markup=get_callback_btns(btns={
                                            'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å': 'repeat',
                                            '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å': 'edit'
                                        }))

    await use_model(session, message.from_user.id, model)






# ######################################################################################################
#
#
# ################################## MUSIC #############################################################
#
# async def send_result(message: types.Message, session: AsyncSession, task_id, http_session: aiohttp.ClientSession):
#
#     try:
#         status, music, name, lyrics = await suno_wait_for_task_and_get_file(task_id, http_session)
#         if status == 'SENSITIVE_WORD_ERROR':
#             await message.answer('ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –º–æ–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.')
#             return
#         track = URLInputFile(url=music, filename=f"{name}.mp3")
#
#         await message.answer_document(document=track)
#         await message.answer('–í–∞—à —Ç—Ä–µ–∫ –≥–æ—Ç–æ–≤üòå\n\n'
#                              f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n'
#                              f'–¢–µ–∫—Å—Ç: {lyrics}')
#         await use_model(session, message.from_user.id, 'suno_song')
#     except Exception as e:
#         print(e)
#         await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –¥–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å @aitb_support')
#         return
#
#
#
# @ai_func.message(AISelected.music, F.text)
# async def create_song(message: types.Message, session: AsyncSession, http_session: aiohttp.ClientSession):
#     if await check_balance(session, message.from_user.id, 'suno_song'):
#         prompt = message.text
#         await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 5 –º–∏–Ω—É—Ç...")
#
#         data = await suno_get_song(prompt, http_session)
#
#         await send_result(message, session, data, http_session)
#
#
#     else:
#         await message.answer(
#             '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
#             reply_markup=kbd_tk)
#
#
#
# # @ai_func.message(AISelected.make_cover, or_f(F.audio, F.voice))
# # async def make_cover(message: types.Message, bot: Bot, session: AsyncSession, state: FSMContext):
# #     user_id = message.from_user.id
# #
# #     if not await check_balance(session, user_id, 'suno_song'):
# #         await message.answer(
# #             '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≤—ã–ø–æ–ª–Ω—é –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
# #             reply_markup=kbd_tk)
# #         return
# #
# #     if message.audio or message.voice:
# #         file_id = message.audio.file_id if message.audio else message.voice.file_id
# #         file_info = await bot.get_file(file_id)
# #         file_path = file_info.file_path
# #         file_url = f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}'
# #         response = requests.get(file_url)
# #
# #
# #
# #         track = f'audio_to_sep{user_id}.mp3'
# #         with open(track, "wb") as f:
# #             f.write(response.content)
# #
# #         audio_url = await suno_upload_track(track)
# #         print(audio_url)
# #
# #         os.remove(track)
# #
# #         if not message.caption:
# #             await message.answer('–û—Ç–ª–∏—á–Ω–æ —Ç—Ä–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω!\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å...')
# #             await state.set_state(AISelected.music_adding_prompt)
# #             await state.update_data(music_adding_prompt=audio_url)
# #             return
# #
# #         await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 5 –º–∏–Ω—É—Ç...")
# #
# #         task_id = await suno_get_cover(audio_url, message.caption)
# #
# #         await send_result(message, session, task_id)
# #
# #
# #
# # @ai_func.message(AISelected.music_adding_prompt, F.text)
# # async def music_adding_prompt(message: types.Message, state: FSMContext, session: AsyncSession,):
# #     data = await state.get_data()
# #     audio_url = data['music_adding_prompt']
# #
# #     await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 5 –º–∏–Ω—É—Ç...")
# #
# #     task_id = await suno_get_cover(audio_url, message.caption)
# #
# #     await send_result(message, session, task_id)
#
#
#
#
#
#
#
# ######################################################################################################
#
#
# ################################## VIDEO #############################################################
#
# ratios = ['16:9','4:3','1:1','3:4','9:16','21:9','9:21']
#
# @ai_func.message(AISelected.video)
# async def video(message: types.Message, bot: Bot, state: FSMContext, session: AsyncSession, http_session: aiohttp.ClientSession):
#     user_id = message.from_user.id
#     model = 'video'
#     if await check_balance(session, user_id, 'video'):
#
#         ratio = '16:9'
#         long = False
#         image_data = None
#         image = None
#
#         if message.photo:
#             file_id = message.photo[-1].file_id
#             file_info = await bot.get_file(file_id)
#
#             file_path = file_info.file_path
#
#             file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
#             async with http_session.get(file_url) as response:
#                 if response.status != 200:
#                     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ HTTP
#                     text = await response.text()
#                     raise Exception(f"HTTP error {response.status}: {text}")
#                 data = await response.content.read()
#
#                 image = f"files/image_for_video{user_id}.jpeg"
#                 with open(image, "wb") as f:
#                     f.write(data)
#                     print(f'saved to {image}')
#
#             image_data = await get_image_for_video(image)
#
#             if message.caption:
#                 prompt =message.caption
#             else:
#                 await state.update_data(video_adding_prompt=image_data)
#                 await state.set_state(AISelected.video_adding_prompt)
#                 await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ...')
#                 return
#
#         elif message.text:
#             prompt = message.text
