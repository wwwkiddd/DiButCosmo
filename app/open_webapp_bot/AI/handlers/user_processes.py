from _datetime import datetime

from aiogram import types, Router, F, Bot
from aiogram.filters import Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import LabeledPrice, PreCheckoutQuery
from sqlalchemy.ext.asyncio import AsyncSession

from app.open_webapp_bot.AI.database.orm_query import orm_get_balance, orm_update_balance, orm_get_promo_code, \
    orm_delete_promo_code, orm_use_promo_code
from app.open_webapp_bot.AI.kbds.inline import get_callback_btns, kbd_tk

user_processes_ai = Router()
CURRENCY_1 = 'XTR'

class Processes(StatesGroup):
    promo_code = State()


################################## COMMANDS ####################################################################

@user_processes_ai.message(Command('help'))
async def help_cmd(message: types.Message):
    await message.answer \
        ('<strong>–ß—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ, –ø–∏—à–∏—Ç–µ –µ–º—É –ø—Ä—è–º –≤ —á–∞—Ç–µ, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –æ—Ç–≤–µ—á–∞—Ç—å.</strong>\n\n'
         '–í –Ω–∞—à–µ–º –±–æ—Ç–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –µ—Å—Ç—å <i>—Ç–æ–∫–µ–Ω—ã (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è –≤–∞–ª—é—Ç–∞)</i>. –ë–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–ª–∞—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –∏ –Ω–µ –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞ –æ—Å—Ç–∞–ª—å–Ω–æ–µ!\n'
         '–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã /balance\n\n'
         '–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start\n\n'
         '–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –≤ –±–æ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º @aitb_support',)

@user_processes_ai.message(Command('suggest'))
async def suggest_an_idea(message: types.Message):
    await message.answer('‚≠êÔ∏è –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ –≤–∏–¥–µ telegram stars!!! ‚≠êÔ∏è\n@aitb_support')


@user_processes_ai.message(or_f(Command('balance'), F.text == 'üí≤ –ë–∞–ª–∞–Ω—Å'))
async def balance_cmd(message: types.Message, session: AsyncSession):
    balance = await orm_get_balance(session, message.from_user.id)
    balance = str(balance)
    if balance[-1] in ['0', '5', '6', '7', '8', '9']:
        tk = '—Ç–æ–∫–µ–Ω–æ–≤'
    elif balance[-1] in ['2', '3', '4']:
        tk = '—Ç–æ–∫–µ–Ω–∞'
    else:
        tk = '—Ç–æ–∫–µ–Ω'
    await message.answer(f'üí∞<b> –ë–ê–õ–ê–ù–°</b>:\n{balance} {tk}\n\n'
                               '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç—ã –º–æ–∂–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n- –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã üí∞\n- –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è üéØ\n- –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', reply_markup=kbd_tk)

################################## PAYMENTS ####################################################################
@user_processes_ai.callback_query(F.data == 'pay_for_ai')
async def payment_proc(callback: types.CallbackQuery):

    await callback.answer()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (tk):', reply_markup=get_callback_btns(btns={
        '200 tk - 100‚≠êÔ∏è': 'tk_200_100',
        '300 tk - 125‚≠êÔ∏è': 'tk_300_125',
        '500 tk - 250‚≠êÔ∏è': 'tk_500_250',
        '1000 tk - 400‚≠êÔ∏è': 'tk_1000_400',
        '5000 tk - 1600‚≠êÔ∏è': 'tk_5000_1600',
        '7500 tk - 2200‚≠êÔ∏è': 'tk_7500_2000',
        '10000 tk - 3000‚≠êÔ∏è': 'tk_10000_3000',
    }))

@user_processes_ai.callback_query(F.data.startswith('tk_'))
async def to_pay(callback: types.CallbackQuery,):
    amount_tk = callback.data.split('_')[1]
    amount_xtr = int(callback.data.split('_')[-1])
    await callback.answer()
    prices = [LabeledPrice(label=CURRENCY_1, amount=amount_xtr)]

    await callback.message.answer_invoice(title='–û–ø–ª–∞—Ç–∞',
                                          description=f'–ü–æ–∫—É–ø–∫–∞ {amount_tk} —Ç–æ–∫–µ–Ω–æ–≤',
                                          prices=prices,
                                          payload=f'purchase_{amount_tk}',
                                          currency=CURRENCY_1)

@user_processes_ai.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@user_processes_ai.message(F.successful_payment)
async def successful_payment(message: types.Message, session: AsyncSession, bot: Bot):
    amount_tk = message.successful_payment.invoice_payload.split('_')[-1]
    user_id = message.from_user.id

    try:
        await orm_update_balance(session, message.from_user.id, int(amount_tk))
        await message.answer(f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {amount_tk} —Ç–æ–∫–µ–Ω–æ–≤!\n–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 –º–∏–Ω—É—Ç—ã')
    except Exception as e:
        print(e)
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\n –ó–≤–µ–∑–¥—ã –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á—ë—Ç')
        await bot.refund_star_payment(user_id=message.from_user.id,
                                      telegram_payment_charge_id=message.successful_payment.telegram_payment_charge_id)

################################## REFERRALS ####################################################################


@user_processes_ai.callback_query(F.data == 'challenge')
async def challenge(callback: types.CallbackQuery):
    is_challenge = False
    await callback.answer()

    if is_challenge:
        await callback.message.answer('‚ú® <b>–ü–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏!</b> ‚ú®\n'
                                      '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª —Å—Ç–æ–∏—Ç - ')
    else:
        await callback.message.answer('–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–∞–¥–∞–Ω–∏—è...')

################################## PROMO CODES ####################################################################

@user_processes_ai.callback_query(F.data == 'user_promo_code')
async def promo_code(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥...\n\n–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏, —á—Ç–æ–±—ã –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É‚òùÔ∏è')
    await state.set_state(Processes.promo_code)

@user_processes_ai.message(Processes.promo_code)
async def get_promo_code(message: types.Message, session: AsyncSession, state: FSMContext):
    code = await orm_get_promo_code(session, message.text)

    if code:
        user_id = message.from_user.id
# –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
#         print(code.date_end, datetime.now())
        if code.date_end < datetime.now():
            await message.answer('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫...')
            await state.clear()
            await orm_delete_promo_code(session, code.code)
            return
        if user_id not in code.used_by:
            await orm_use_promo_code(session, code.code, user_id)
            await orm_update_balance(session, user_id, code.value)
            await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {code.value} —Ç–æ–∫–µ–Ω–æ–≤')
        else:
            await message.answer('–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥')
    else:
        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π')

    await state.clear()






