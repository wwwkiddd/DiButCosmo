import os
import asyncio
import logging
from datetime import datetime
from typing import Optional, List

import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import json

from dotenv import load_dotenv
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '.env'))


logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS').split(',')))
REVIEWS_CHAT_LINK = os.getenv('REVIEWS_CHAT_LINK', '')

DB_PATH = os.getenv('DB_PATH', 'bot_database.db')
CONFIG_PATH = os.getenv('CONFIG_PATH', 'config.json')

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Form(StatesGroup):
    language = State()
    name = State()
    phone = State()
    gender = State()
    birth_date = State()
    slot = State()
    anamnesis = State()

    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    service_config = State()
    faq_config = State()
    reviews_config = State()
    edit_day = State()


class AdminForm(StatesGroup):
    add_slots = State()


class Database:
    def __init__(self, path: str):
        self.path = path
        self.conn: Optional[aiosqlite.Connection] = None

    async def connect(self):
        self.conn = await aiosqlite.connect(self.path)
        await self.conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                language TEXT NOT NULL,
                name TEXT,
                phone TEXT,
                gender TEXT,
                birth_date TEXT,
                registered INTEGER DEFAULT 0
            )
        """)
        await self.conn.execute("""
            CREATE TABLE IF NOT EXISTS slots (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                datetime TEXT NOT NULL,
                available INTEGER DEFAULT 1
            )
        """)
        await self.conn.execute("""
            CREATE TABLE IF NOT EXISTS pending_payments (
                user_id INTEGER PRIMARY KEY,
                slot_time TEXT NOT NULL,
                service TEXT NOT NULL
            )
        """)
        await self.conn.commit()

    async def add_user(self, user_id: int, language: str):
        await self.conn.execute(
            "INSERT OR IGNORE INTO users (id, language) VALUES (?, ?)",
            (user_id, language)
        )
        await self.conn.commit()

    async def update_user(self, user_id: int, **kwargs):
        keys = list(kwargs.keys())
        values = list(kwargs.values())
        set_clause = ", ".join([f"{k} = ?" for k in keys])
        await self.conn.execute(
            f"UPDATE users SET {set_clause} WHERE id = ?",
            values + [user_id]
        )
        await self.conn.commit()

    async def get_user(self, user_id: int) -> Optional[dict]:
        cursor = await self.conn.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        row = await cursor.fetchone()
        if row:
            keys = [column[0] for column in cursor.description]
            return dict(zip(keys, row))
        return None

    async def add_slots(self, slots: List[str]):
        current_year = datetime.now().year
        formatted_slots = []

        for slot in slots:
            slot = slot.strip()
            if not slot:
                continue

            try:
                dt = datetime.strptime(slot, "%d.%m %H:%M")
                dt = dt.replace(year=current_year)
                formatted_slots.append(dt.strftime("%d.%m.%Y %H:%M"))
            except ValueError:
                continue

        if formatted_slots:
            for slot in formatted_slots:
                await self.conn.execute(
                    "INSERT INTO slots (datetime, available) VALUES (?, ?)",
                    (slot, 1)
                )
            await self.conn.commit()
            return len(formatted_slots)
        return 0

    async def get_available_slots(self) -> List[dict]:
        cursor = await self.conn.execute(
            "SELECT id, datetime FROM slots WHERE available = 1 ORDER BY datetime"
        )
        rows = await cursor.fetchall()
        return [{"id": row[0], "datetime": row[1]} for row in rows]

    async def add_pending_payment(self, user_id: int, slot_time: str, service: str):
        await self.conn.execute(
            "INSERT OR REPLACE INTO pending_payments (user_id, slot_time, service) VALUES (?, ?, ?)",
            (user_id, slot_time, service)
        )
        await self.conn.commit()

    async def get_all_pending_payments(self):
        cursor = await self.conn.execute("SELECT user_id, slot_time, service FROM pending_payments")
        return await cursor.fetchall()

    async def delete_pending_payment(self, user_id: int):
        await self.conn.execute("DELETE FROM pending_payments WHERE user_id = ?", (user_id,))
        await self.conn.commit()

    async def close(self):
        await self.conn.close()


db = Database(DB_PATH)

def load_config():
    if not os.path.exists(CONFIG_PATH):
        default = {"schedule": {}, "services": [], "reviews_link": "", "faq": ""}
        with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
            json.dump(default, f, ensure_ascii=False, indent=2)
    with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_config(config: dict):
    with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)


async def language_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
    builder.button(text="English", callback_data="lang_en")
    return builder.as_markup()


async def show_main_menu(user_id: int, language: str):
    builder = ReplyKeyboardBuilder()
    buttons = [
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", "–û—Ç–∑—ã–≤—ã", "FAQ", "–ú–∞–≥–∞–∑–∏–Ω", "–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å"
    ] if language == "ru" else [
        "Make an appointment", "Reviews", "FAQ", "Shop", "Recommend"
    ]
    builder.add(*[types.KeyboardButton(text=btn) for btn in buttons])
    markup = builder.adjust(2).as_markup(resize_keyboard=True)

    markup = builder.as_markup(resize_keyboard=True)
    await bot.send_message(user_id, "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É –≤—Å–µ–≥–æ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤!‚úåÔ∏è\n–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ:\n\nüìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É\nüí¨ –û—Ç–∑—ã–≤—ã ‚Äî –ø–æ—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –ø–∏—à—É—Ç –¥—Ä—É–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤\n‚ùì FAQ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\nüõç –ú–∞–≥–∞–∑–∏–Ω ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\nü§ù –ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å ‚Äî –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å\nüîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å—è—Ö" if language == "ru" else "Choose an option:",
                           reply_markup=markup)


async def show_admin_menu(user_id: int):
    builder = ReplyKeyboardBuilder()
    buttons = [
        "–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π",
        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–∫–Ω–æ",
        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Å–ª—É–≥–∏",
        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å FAQ",
        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–∑—ã–≤—ã"
    ]

    builder.add(*[types.KeyboardButton(text=btn) for btn in buttons])
    markup = builder.adjust(2).as_markup(resize_keyboard=True)

    markup = builder.as_markup(resize_keyboard=True)
    await bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!\n–ó–¥–µ—Å—å –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∑–∞—è–≤–∫–∞–º–∏ üõ†\n\n–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\nüìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π ‚Äî –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\nüóì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –∏ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –≥—Ä–∞—Ñ–∏–∫—É\n‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–∫–Ω–æ ‚Äî –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏\nüíá‚Äç‚ôÇÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Å–ª—É–≥–∏ ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ\n‚ùì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å FAQ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤\nüí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–∑—ã–≤—ã ‚Äî —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç —Å –≤–∞—à–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –±–æ—Ç–æ–º –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤!üöÄ\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤–∞—à–∏—Ö –ø–µ—Ä–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤! ‚ú®", reply_markup=markup)

from datetime import datetime, timedelta

async def generate_slots_from_schedule():
    config = load_config()
    schedule = config.get("schedule", {})
    now = datetime.now()

    for i in range(30):  # –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
        date = now + timedelta(days=i)
        weekday = date.strftime("%A").lower()  # monday, tuesday, ...
        times = schedule.get(weekday, [])
        for t in times:
            try:
                hour, minute = map(int, t.split(":"))
                slot_time = date.replace(hour=hour, minute=minute, second=0, microsecond=0)
                # –î–æ–±–∞–≤–∏–º –≤ –±–∞–∑—É, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –µ—â—ë –Ω–µ—Ç
                cursor = await db.conn.execute("SELECT 1 FROM slots WHERE datetime = ?", (slot_time.strftime("%d.%m.%Y %H:%M"),))
                if not await cursor.fetchone():
                    await db.conn.execute(
                        "INSERT INTO slots (datetime, available) VALUES (?, ?)",
                        (slot_time.strftime("%d.%m.%Y %H:%M"), 1)
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–∞: {e}")
    await db.conn.commit()


@dp.message(F.text.startswith("/start"))
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user = await db.get_user(user_id)

        if user_id in ADMIN_IDS:
            if not user:
                await db.add_user(user_id, language="ru")
            await show_admin_menu(user_id)
            return

        if user and user.get("registered"):
            await show_main_menu(user_id, user['language'])
        else:
            await db.add_user(user_id, language="ru")
            await state.set_state(Form.language)
            await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏!üìã\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –º–∞—Å—Ç–µ—Ä –º–æ–≥ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—èüìû/Hi! You have reached the bot for recording a service!\nüìãPlease register so that the master can contact youüìû\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=await language_keyboard())

    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query(F.data.startswith("lang_"))
async def process_language(callback: types.CallbackQuery, state: FSMContext):
    lang = callback.data.split("_")[1]
    await db.update_user(callback.from_user.id, language=lang)
    await state.set_state(Form.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:üíÅ‚Äç‚ôÇÔ∏è" if lang == "ru" else "Enter your name:üíÅ‚Äç‚ôÇÔ∏è")


@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await db.update_user(message.from_user.id, name=message.text)
    user = await db.get_user(message.from_user.id)
    await state.set_state(Form.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:‚òéÔ∏è" if user['language'] == "ru" else "Enter your phone number:‚òéÔ∏è")


@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await db.update_user(message.from_user.id, phone=message.text)
    user = await db.get_user(message.from_user.id)
    await state.set_state(Form.gender)
    await message.answer("–í–∞—à –ø–æ–ª (–º/–∂):üíü" if user['language'] == "ru" else "Your gender (m/f):üíü")


@dp.message(Form.gender)
async def process_gender(message: types.Message, state: FSMContext):
    await db.update_user(message.from_user.id, gender=message.text)
    user = await db.get_user(message.from_user.id)
    await state.set_state(Form.birth_date)
    await message.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):üìÖ" if user['language'] == "ru" else "Birth date (DD.MM.YYYY):üìÖ")


@dp.message(Form.birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
        await db.update_user(
            message.from_user.id,
            birth_date=message.text,
            registered=1
        )
        user = await db.get_user(message.from_user.id)
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!‚úÖ" if user['language'] == "ru" else "Registration complete!‚úÖ")
        await state.clear()
        await show_main_menu(message.from_user.id, user['language'])
    except ValueError:
        user = await db.get_user(message.from_user.id)
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.üîÑ" if user[
                                                                              'language'] == "ru" else "Invalid date format. Try again.üîÑ")


@dp.message(F.text.in_(["–ú–∞–≥–∞–∑–∏–Ω", "Shop"]))
async def shop_coming_soon(message: types.Message):
    await message.answer("–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ—Ç –º–∞–≥–∞–∑–∏–Ω!" if message.text == "–ú–∞–≥–∞–∑–∏–Ω" else "Shop coming soon!")


@dp.message(F.text.in_(["–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å", "Recommend"]))
async def referral_coming_soon(message: types.Message):
    await message.answer(
        "–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞!" if message.text == "–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å" else "Referral system coming soon!")


@dp.message(F.text.in_(["FAQ"]))
async def faq_message(message: types.Message):
    config = load_config()
    await message.answer(f"‚ùì FAQ:\n{config.get('faq','')}")


@dp.message(F.text.in_(["–û—Ç–∑—ã–≤—ã", "Reviews"]))
async def reviews_message(message: types.Message):
    config = load_config()
    await message.answer(f"–û—Ç–∑—ã–≤—ã: {config.get('reviews_link','')}")


@dp.message(F.text.in_(["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", "Make an appointment"]))
async def start_appointment(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    config = load_config()
    services = config.get("services", [])
    if not services:
        await message.answer("–£—Å–ª—É–≥ –ø–æ–∫–∞ –Ω–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    kb = InlineKeyboardBuilder()
    for s in services:
        kb.button(text=s, callback_data=f"service_{s}")
    kb.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb.as_markup())


@dp.callback_query(F.data.startswith("service_"))
async def choose_service(callback: types.CallbackQuery, state: FSMContext):
    service = callback.data.split("_", 1)[1]
    await state.update_data(service=service)

    user = await db.get_user(callback.from_user.id)
    lang = user['language'] if user else 'ru'

    slots = await db.get_available_slots()
    if not slots:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–∫–æ–Ω." if lang == 'ru' else "No available slots.")
        await state.clear()
        return

    builder = InlineKeyboardBuilder()
    for slot in slots:
        builder.button(text=slot["datetime"], callback_data=f"slot_{slot['id']}")
    builder.adjust(1)

    await state.set_state(Form.slot)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:" if lang == 'ru' else "Choose time:",
                                  reply_markup=builder.as_markup())


@dp.callback_query(F.data.startswith("slot_"), Form.slot)
async def choose_slot(callback: types.CallbackQuery, state: FSMContext):
    slot_id = int(callback.data.split("_", 1)[1])
    await state.update_data(slot_id=slot_id)
    await state.set_state(Form.anamnesis)

    user = await db.get_user(callback.from_user.id)
    lang = user['language'] if user else 'ru'

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å:"
        if lang == 'ru' else
        "Enter your medical history (allergies, skin problems, etc.):"
    )


@dp.message(Form.anamnesis)
async def submit_anamnesis(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user = await db.get_user(message.from_user.id)
    slot_id = data["slot_id"]
    await db.conn.execute("UPDATE slots SET available = 0 WHERE id = ?", (slot_id,))
    await db.conn.commit()
    service = data["service"]
    anamnesis = message.text

    await state.clear()

    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['name']}\n–£—Å–ª—É–≥–∞: {service}\n–ê–Ω–∞–º–Ω–µ–∑: {anamnesis}\n–°–ª–æ—Ç ID: {slot_id}",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{message.from_user.id}_{slot_id}_{service}")
            .button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{message.from_user.id}")
            .as_markup()
        )

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")


@dp.callback_query(F.data.startswith("cancel_"))
async def admin_cancel(callback: types.CallbackQuery):
    try:
        _, user_id = callback.data.split("_")
        user_id = int(user_id)

        await callback.message.edit_reply_markup()
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await callback.message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.")
        logging.exception(e)


@dp.callback_query(F.data.startswith("confirm_"))
async def admin_confirm(callback: types.CallbackQuery):
    try:
        _, user_id, slot_id, service = callback.data.split("_", 3)
        user_id, slot_id = int(user_id), int(slot_id)

        cursor = await db.conn.execute("SELECT datetime FROM slots WHERE id = ?", (slot_id,))
        row = await cursor.fetchone()
        if not row:
            await callback.message.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        slot_time = row[0]

        await db.add_pending_payment(user_id, slot_time, service)

        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 900‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É 1234 5678 9012 3456):")
    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.")
        logging.exception(e)

@dp.callback_query(F.data.startswith(("paid_", "decline_")))
async def payment_response(callback: types.CallbackQuery):
    action, user_id = callback.data.split("_", 1)
    user_id = int(user_id)

    user = await db.get_user(user_id)
    if action == "paid":
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} –æ–ø–ª–∞—Ç–∏–ª –∑–∞–ø–∏—Å—å.")
    else:
        await callback.message.answer("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['name']} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å.")

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–∫–Ω–æ")
async def ask_manual_slot(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await state.set_state(AdminForm.add_slots)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.08.2025 14:00):")

@dp.message(AdminForm.add_slots)
async def save_manual_slot(message: types.Message, state: FSMContext):
    try:
        dt = datetime.strptime(message.text.strip(), "%d.%m.%Y %H:%M")
        await db.conn.execute("INSERT INTO slots (datetime, available) VALUES (?, ?)", (dt.strftime("%d.%m.%Y %H:%M"), 1))
        await db.conn.commit()
        await message.answer("‚úÖ –û–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await state.clear()

@dp.message(F.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def generate_schedule(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await generate_slots_from_schedule()
    await message.answer("‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def configure_schedule(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    days = ["–ü–Ω/Mon", "–í—Ç/Tue", "–°—Ä/Wed", "–ß—Ç/Thu", "–ü—Ç/Fri", "–°–±/Sat", "–í—Å/Sun"]
    builder = InlineKeyboardBuilder()
    for day in days:
        builder.button(text=day.capitalize(), callback_data=f"edit_day_{day}")
    builder.adjust(2)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=builder.as_markup())


@dp.callback_query(F.data.startswith("edit_day_"))
async def ask_day_slots(callback: types.CallbackQuery, state: FSMContext):
    day = callback.data.split("_", 2)[2]
    await state.update_data(edit_day=day)
    await state.set_state(Form.edit_day)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {day.capitalize()} —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Ñ–æ—Ä–º–∞—Ç HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 10:00,14:30):")

@dp.message(Form.edit_day)
async def save_day_slots(message: types.Message, state: FSMContext):
    data = await state.get_data()
    day = data["edit_day"]
    times = [t.strip() for t in message.text.split(",") if t.strip()]
    config = load_config()
    config.setdefault("schedule", {})[day] = times
    save_config(config)
    await message.answer(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.capitalize()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {times}")
    await state.clear()

@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Å–ª—É–≥–∏")
async def configure_services(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await state.set_state(Form.service_config)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ß–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞, –ü–∏–ª–∏–Ω–≥, –ú–∞—Å—Å–∞–∂):")

@dp.message(Form.service_config)
async def save_services(message: types.Message, state: FSMContext):
    services = [s.strip() for s in message.text.split(",") if s.strip()]
    config = load_config()
    config["services"] = services
    save_config(config)
    await message.answer(f"‚úÖ –£—Å–ª—É–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {services}")
    await state.clear()

@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å FAQ")
async def configure_faq(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await state.set_state(Form.faq_config)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç FAQ:")

@dp.message(Form.faq_config)
async def save_faq(message: types.Message, state: FSMContext):
    faq = message.text.strip()
    config = load_config()
    config["faq"] = faq
    save_config(config)
    await message.answer("‚úÖ FAQ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.clear()

@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–∑—ã–≤—ã")
async def configure_reviews(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await state.set_state(Form.reviews_config)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –æ—Ç–∑—ã–≤–æ–≤ (URL):")

@dp.message(Form.reviews_config)
async def save_reviews(message: types.Message, state: FSMContext):
    url = message.text.strip()
    config = load_config()
    config["reviews_link"] = url
    save_config(config)
    await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {url}")
    await state.clear()

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π")
async def handle_list_appointments(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    cursor = await db.conn.execute("SELECT datetime FROM slots WHERE available = 0 ORDER BY datetime")
    rows = await cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤.")
    else:
        text = "–ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã:\n" + "\n".join([row[0] for row in rows])
        await message.answer(text)


async def on_startup():
    await db.connect()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    default_slots = []
    existing = await db.get_available_slots()
    if not existing:
        await db.add_slots(default_slots)
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–∫–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")


@dp.message()
async def receive_payment_info(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        pending_payments = await db.get_all_pending_payments()
        for user_id, slot_time, service in pending_payments:
            text = f"""
        ‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

        üß¥ –£—Å–ª—É–≥–∞: {service}
        üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {slot_time}

        üí∞ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: {message.text}

        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:
        """
            await bot.send_message(
                user_id,
                text,
                reply_markup=InlineKeyboardBuilder()
                .button(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{user_id}")
                .button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"decline_{user_id}")
                .as_markup()
            )
            await db.delete_pending_payment(user_id)

async def on_shutdown():
    await db.close()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())